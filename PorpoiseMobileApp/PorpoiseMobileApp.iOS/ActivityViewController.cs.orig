// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Linq;
using Foundation;
using MvvmCross.Binding.iOS.Views;
using MvvmCross.Core.ViewModels;
using PorpoiseMobileApp.Converters;
using PorpoiseMobileApp.Models;
using PorpoiseMobileApp.ViewModels;
using UIKit;

namespace PorpoiseMobileApp.iOS
{

	//[HelpAttribute("http://localhost/porpoise")]
	public partial class ActivityViewController : MvvmViewController<ActivityViewModel>
	{
		public const int USER_TAB = 0;
		public const int COMPANY_TAB = 1;



		public HourLog PostId
		{

			get; set;

		}

		public int CurrentNumberOfPosts
		{

			get;

			set;


		}

		public UISegmentedControl segmentControl
		{

			get
			{

				return this.ActivitySegmentedControl;

			}

		}

		public ActivityViewController(IntPtr handle) : base(handle)
		{

		}

		public override void ViewWillAppear(bool animated)
		{
			base.ViewWillAppear(animated);

			//Write your code here



			this.UserActivityTableView.Hidden = true;
			CompanyActivityTableView.Hidden = true;
			InvokeOnMainThread(() =>
					{
						ViewModel.LoadPosts();
					});



			this.SetupActivitySource();

		}

		public override void ViewDidLayoutSubviews()
		{

			UserActivityTableView.Bounds = UIScreen.MainScreen.Bounds;

			CompanyActivityTableView.Bounds = UIScreen.MainScreen.Bounds;

			this.View.AutosizesSubviews = true;

		}
		public override void ViewDidLoad()
		{
			base.ViewDidLoad();

			NagivationBarSetup();

			this.CompanyActivityTableView.LayoutMargins = UIEdgeInsets.Zero;

			this.CompanyActivityTableView.SeparatorInset = UIEdgeInsets.Zero;


			this.UserActivityTableView.LayoutMargins = UIEdgeInsets.Zero;

			this.UserActivityTableView.SeparatorInset = UIEdgeInsets.Zero;

			Debug.WriteLine("VIEW WIDTH " + this.View.Bounds.Width.ToString());

			UserActivityTableView.Bounds = UIScreen.MainScreen.Bounds;

			CompanyActivityTableView.Bounds = UIScreen.MainScreen.Bounds;

			this.View.AutosizesSubviews = true;

			UIView view = new UIView(this.View.Bounds);

			//view.AutoresizingMask = UIView.


			//View.BringSubviewToFront(Overlay);
			Bindings.Bind(Overlay).For(x => x.Hidden).To(x => x.InFlight).WithConversion(new InverseConverter());
			Bindings.Apply();

			InvokeOnMainThread(() =>
				{
					SetupActivitySource();
				});

			/*ViewModel.ForPropertyChange(x => x.ChangeWelldoneImage, y =>
			{

				Debug.WriteLine("ChangeWelldoneImage IS TRUE");

			});*/

			ViewModel.ForPropertyChange(x => x.IsDeleting, y =>
			{

				SetupActivitySource();

			});

			ViewModel.ForPropertyChange(x => x.ChangedWelldones , y =>
			{
				Debug.WriteLine("WELLDONES HAVE CHANGED");

				this.View.ReloadInputViews();

				/*UITableViewCell cell = this.CompanyActivityTableView.CellAt(this.CompanyActivityTableView.IndexPathForSelectedRow);

				if (cell != null) {

					Debug.WriteLine("CELL IS NOT NULL");
				
				}*/





			});

			//ViewModel.ForPropertyChange(x => x.Po

			ViewModel.ForPropertyChange(x => x.IsDeleting, y =>
			{

				Debug.WriteLine("Is Deleting has changed");

				if (y == true)
				{

					this.showDeletePostAlert();

				}


			});


			ViewModel.ForPropertyChange(x => x.UserPosts, y =>
			{
				SetupActivitySource();
			});


			ViewModel.ForPropertyChange(x => x.CompanyPosts, y =>
			{
				SetupActivitySource();
			});

			ActivitySegmentedControl.ValueChanged += (sender, e) =>
			{

				View.BringSubviewToFront(Overlay);
				ViewModel.LoadPosts();
				SetupActivitySource();

				Debug.WriteLine(ViewModel.UserPosts.Count);

			};





		}

		void NagivationBarSetup()
		{
			if (this.NavigationController != null)
			{
				this.NavigationController.NavigationBar.BarStyle = UIBarStyle.Black;
				this.NavigationController.NavigationBar.ShadowImage = new UIImage();
				this.NavigationController.NavigationBar.BackgroundColor = PorpoiseColors.Turquoise;
			}

			NavigationItem.RightBarButtonItem = new UIBarButtonItem("Logout", UIBarButtonItemStyle.Plain, (s, e) =>
			{
				ViewModel.Logout();
			});
		}



		public override void ViewDidAppear(bool animated)
		{
			base.ViewDidAppear(animated);
			ActivitySegmentedControl.SelectedSegment = COMPANY_TAB;
			UserActivityTableView.Hidden = true;
			CompanyActivityTableView.Hidden = true;
		}


		//Load posts
		void SetupActivitySource()
		{

			ViewModel.InFlight = true;

			UserActivityTableView.Source = null;
			List<HourLog> postsSource = new List<HourLog>();

			switch (ActivitySegmentedControl.SelectedSegment)
			{

				case USER_TAB:
					postsSource = ViewModel.UserPosts;
					var userSource = new ActivityTableSource(postsSource, UserActivityTableView, this);
					UserActivityTableView.Source = userSource;
					//UserActivityTableView.SeparatorColor = UIColor.White;
					UserActivityTableView.Hidden = false;
					CompanyActivityTableView.Hidden = true;

					this.CurrentNumberOfPosts = ViewModel.UserPosts.Count;

					break;

				case COMPANY_TAB:
					postsSource = ViewModel.CompanyPosts;
					var compSource = new ActivityTableSource(postsSource, CompanyActivityTableView, this);
					CompanyActivityTableView.Source = compSource;
					//CompanyActivityTableView.SeparatorColor = UIColor.White;
					UserActivityTableView.Hidden = true;
					CompanyActivityTableView.Hidden = false;
					CompanyActivityTableView.EstimatedRowHeight = 120f;
					CompanyActivityTableView.RowHeight = 120f;
					//CompanyActivityTableView.SetNeedsLayout();
					//CompanyActivityTableView.LayoutIfNeeded();
					this.CurrentNumberOfPosts = ViewModel.CompanyPosts.Count;
					break;
			}

			ViewModel.InFlight = false;
		}


		//Alert displayed when deleting post
		public void showDeletePostAlert()
		{

			/*var alert = UIAlertController.Create("DeletePost", "Are you sure you want to delete this post", UIAlertControllerStyle.Alert);

			alert.AddAction(UIAlertAction.Create("Yes", UIAlertActionStyle.Default, x =>
			{

				this.deletePost(id);



			}));

			alert.AddAction(UIAlertAction.Create("No", UIAlertActionStyle.Cancel, null));*/


			// Create a new Alert Controller
			UIAlertController actionSheetAlert = UIAlertController.Create(null, null, UIAlertControllerStyle.ActionSheet);

			// Add Actions


			actionSheetAlert.AddAction(UIAlertAction.Create("Edit Post", UIAlertActionStyle.Default, async (action) =>
			{

				await ViewModel.EditPost();

			}));

			actionSheetAlert.AddAction(UIAlertAction.Create("Delete Post", UIAlertActionStyle.Default, async (action) =>
			{

				await ViewModel.DeletePost();

			}));

			/*actionSheetAlert.AddAction(UIKit.UIAlertAction.Create("Well Done!", UIKit.UIAlertActionStyle.Default, (action) =>
			{

				Debug.WriteLine("Well Done!");

			}));*/


			actionSheetAlert.AddAction(UIAlertAction.Create("Cancel", UIAlertActionStyle.Cancel, (action) => Console.WriteLine("Cancel button pressed.")));

			// Required for iPad - You must specify a source for the Action Sheet since it is
			// displayed as a popover
			UIPopoverPresentationController presentationPopover = actionSheetAlert.PopoverPresentationController;
			if (presentationPopover != null)
			{
				presentationPopover.SourceView = this.View;
				presentationPopover.PermittedArrowDirections = UIPopoverArrowDirection.Up;
			}

			// Display the alert
			this.PresentViewController(actionSheetAlert, true, null);

		}


		/*private async void deletePost(Guid id) {

			try
			{

				//await ViewModel.DeletePost(id);

			}
			catch (Exception ex) {

				Console.WriteLine(ex);
			
			}
		
		}*/



		/*public void Delete() {

			showDeletePostAlert();
		
		}*/

	}

	public class ActivityTableSource : MvxTableViewSource
	{

		bool isEmpty;
		bool isCompany;


		const string COMPANY = "company";
		const string USER = "user";
		const string YOUTUBE = "youtube";
		public List<HourLog> Posts { get; set; }
		private static readonly NSString PostCellIdentifier = new NSString("PostItemCellController");
		private static readonly NSString EmptyPostCellIdentifier = new NSString("EmptyPostItemCellController");
		private static readonly NSString CompanyCellIdentifier = new NSString("CompanyPostItemCellController");
		public event EventHandler<RowSelectedEventArgs> IsRowSelected;
		private ActivityViewController activityController;
		private ProfileViewController profileController;

		public ActivityTableSource(UITableView tableView) : base(tableView)
		{
			this.Posts = new List<HourLog>();
		}



		//this method updates the table
		private void updateTable()
		{

			TableView.ReloadData();

		}

		public ActivityTableSource(List<HourLog> posts, UITableView tableView, ActivityViewController activityController = null, ProfileViewController profileController = null) : base(tableView)
		{
			if (activityController != null)
			{
				this.activityController = activityController;
			}
			else if (profileController != null)
			{
				this.profileController = profileController;
			}

			this.Posts = new List<HourLog>();
			if (posts != null && posts.Count > 0 && posts.All(x => x != null))
			{
				isEmpty = false;
				tableView.RegisterNibForCellReuse(UINib.FromName("CompanyPostItemCellController", NSBundle.MainBundle), CompanyCellIdentifier);
				tableView.RegisterNibForCellReuse(UINib.FromName("PostItemCellController", NSBundle.MainBundle), PostCellIdentifier);
				this.Posts = posts;
				ItemsSource = this.Posts.Where(x => !string.IsNullOrEmpty(x.PhotoUrl));

				tableView.SeparatorColor = UIColor.White;
				tableView.SeparatorInset = UIEdgeInsets.FromString("{1,0,0,1}");
			}
			else
			{
				isEmpty = true;
				tableView.RegisterNibForCellReuse(UINib.FromName("EmptyPostItemCellController", NSBundle.MainBundle), EmptyPostCellIdentifier);
				//need to assign a list with at least 1 item so that the GetOrCreateCellFor() gets called and the EmptyPostItemCellController is built
				ItemsSource = new List<string>{
						PorpoiseMobileApp.Resource.NoPostToDisplayMessage
					};
				tableView.SeparatorInset = UIEdgeInsets.Zero;
			}
		}


		public override void RowSelected(UITableView tableView, NSIndexPath indexPath)
		{
			base.RowSelected(tableView, indexPath);
			var post = this.Posts?.Count > 0 ? this.Posts[indexPath.Row] : null;
			if (post != null)
			{

				/*UIAlertController highlightDialog = BuildHighlightDialog(post);
				if (activityController != null && profileController == null)
				{
					activityController.PresentViewController(highlightDialog, true, null);
				}
				else if (profileController != null && activityController == null)
				{

					profileController.PresentViewController(highlightDialog, true, null);
				}*/
			}


			if (IsRowSelected != null)
			{
				var args = new RowSelectedEventArgs(tableView, indexPath);
				IsRowSelected(this, args);
			};

			tableView.DeselectRow(indexPath, false);

		}
		static UIAlertController BuildHighlightDialog(HourLog post)
		{
			var dialogTitle = !string.IsNullOrEmpty(post.EmployeeName) ? $"{post.EmployeeName}'s Highlight" : string.Empty;
			UIAlertController highlightDialog = UIAlertController.Create(dialogTitle, post.Highlight, UIAlertControllerStyle.Alert);

			var action = UIAlertAction.Create(Resource.Ok, UIAlertActionStyle.Default, x => { });
			highlightDialog.AddAction(action);
			return highlightDialog;
		}
		public override nfloat GetHeightForRow(UITableView tableView, NSIndexPath indexPath)
		{
			if (isEmpty)
			{
				return 94f;
			}

			if (isCompany)
			{
				return 491f;
			}

			//UITableViewCell cell = tableView.CellAt(indexPath);



			return 491f;

		}


		protected override UITableViewCell GetOrCreateCellFor(UITableView tableView, NSIndexPath indexPath, object item)
		{


			if (isEmpty)
			{
				var emptyCell = (EmptyPostItemCellController)tableView.DequeueReusableCell(EmptyPostCellIdentifier, indexPath);

				//tableView.RowHeight=491f;	

				tableView.RowHeight = 94f;
				isCompany = false;
				return emptyCell;
			}


			var post = (HourLog)item;
			//if employeeName is null, its a company post
			if (post != null && string.IsNullOrEmpty(post.EmployeeName))
			{
				CompanyPostItemCellController companycell = (CompanyPostItemCellController)tableView.DequeueReusableCell(CompanyCellIdentifier, indexPath);
				companycell.Accessory = UITableViewCellAccessory.None;
				if (post?.PostType == "company" && post?.MediaType == "youtube")
				{
					companycell.PlayIcon.Hidden = false;
					companycell.BringSubviewToFront(companycell.PlayIcon);
				}
				else
				{
					companycell.PlayIcon.Hidden = true;
				}
				isCompany = true;

				tableView.RowHeight = 491f;
				tableView.EstimatedRowHeight = 491f; // set to whatever your "average" cell height is
													 //tableView.EstimatedRowHeight = 120f;
													 //tableView.RowHeight = 120f;
				tableView.SetNeedsLayout();
				tableView.LayoutIfNeeded();

				//Provide the url
				companycell.ProfileImageHelper = post.CompanyLogo;

				//Debug.WriteLine("IMAGE VALUE "+ph);

				if (post.CompanyLogo == null)
				{

					Debug.WriteLine("NULL IMAGE");

					companycell.ProfileImage.Image = new UIImage("noImage.png");

				}

				//cell.ProfileImage.Layer.BorderWidth = 1;
				//cell.ProfileImage.Layer.MasksToBounds = false;
				//cell.Layer.BorderColor = UIColor.White.CGColor;
				//REmovecompanycell.ProfileImage.Layer.CornerRadius = companycell.ProfileImage.Frame.Height / 2;
				//Removecompanycell.ProfileImage.ClipsToBounds = true;


				return companycell;
			}

			else
			{

				Debug.WriteLine("USER POST FOUND " + post.EmployeeName + " POST ID " + post.PosterId);

				Debug.WriteLine("USER " + AccountInfo.UserId);

				//Debug.WriteLine("Organisation " + post.Organisation.Name); 

			}
			Debug.WriteLine("POSTCELLIDENTIFIER " + PostCellIdentifier);
			PostItemCellController cell = (PostItemCellController)tableView.DequeueReusableCell(PostCellIdentifier, indexPath);

			cell.SizeToFit();

			//Show given well dones


			if (AccountInfo.UserId.ToString() == post.PosterId)
			{
				//cell.WellDoneButton.Hidden = true;

				Debug.WriteLine("HIDING WELL DONE BUTTON");



			}
			else
			{

				if (post.WellDones != null && post.WellDones.Length > 0)

				{

					//cell.WellDoneButton.SetBackgroundImage(new UIImage("wellDoneOrange.png"), UIControlState.Normal);

					Debug.WriteLine("Well dones size " + post.WellDones.Length);

					Debug.WriteLine("Creator Logo " + post.WellDones[0].CreatorLogo);

					Debug.WriteLine("Creator Name " + post.WellDones[0].CreatorName);

					Debug.WriteLine("WELL Done user Id: " + post.WellDones[0].UserId);

				}
				else
				{

					//cell.WellDoneButton.SetBackgroundImage(new UIImage("wellDoneGray.png"), UIControlState.Normal);


				}

			}



			//cell.SeparatorInset = UIEdgeInsets.Zero;
			//cell.separatorInset = UIEdgeInsetsZero
			//cell.LayoutMargins = UIEdgeInsets.Zero;

			isCompany = false;
			//tableView.RowHeight = UITableView.AutomaticDimension;
			//cell.SeparatorInset = UIEdgeInsets.Zero;
			//cell.LayoutMargins = UIEdgeInsets.Zero;

			//var avm;

			if (post.ProfileImage != null)
			{
				cell.ProfileUrl = post.ProfileImage;

				cell.ProfileImage.Layer.BorderWidth = 1;
				cell.ProfileImage.Layer.MasksToBounds = false;
				cell.Layer.BorderColor = UIColor.White.CGColor;
				cell.ProfileImage.Layer.CornerRadius = cell.ProfileImage.Frame.Height / 2;
				cell.ProfileImage.ClipsToBounds = true;
			}
			cell.LayoutMargins = UIEdgeInsets.Zero;

			Debug.WriteLine("TABLE WIDTH " + tableView.Bounds.Width.ToString());

			Debug.WriteLine("Cell width " + cell.Bounds.Width.ToString());

			return cell;
		}

	}


	public class RowSelectedEventArgs : EventArgs
	{
		public RowSelectedEventArgs(UITableView tableView, NSIndexPath indexPath)
		{
			this.IndexPath = indexPath;
			this.TableView = tableView;

			Debug.WriteLine("ROW SELECTED");
		}
		public UITableView TableView
		{
			get;
			set;
		}
		public NSIndexPath IndexPath
		{
			get;
			set;
		}
	}
}