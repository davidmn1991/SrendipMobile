// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using PorpoiseMobileApp.ViewModels;
using CoreGraphics;
using System.Linq;
using Photos;
using AVFoundation;
using Acr.Settings;
using MvvmCross.Platform;
using System.Diagnostics;

namespace PorpoiseMobileApp.iOS
{
	public partial class LogHourPhotoViewController : MvvmViewController<LogHourPhotoViewModel>
	{
		UIImage originalImage = new UIImage();
		UIImageView imageView = new UIImageView();
		private ISettings _settings;

		UIImagePickerController imagePicker;
		public LogHourPhotoViewController(IntPtr handle) : base(handle)
		{
		}

		protected void Handle_FinishedPickingMedia(object sender, UIImagePickerMediaPickedEventArgs e)
		{
			Debug.WriteLine("IMAGE TAKEN");
			//imagePicker.NavigationBar.Hidden = false;
			// determine what was selected, video or image
			bool isImage = false;
			switch (e.Info[UIImagePickerController.MediaType].ToString())
			{
				case "public.image":
					Console.WriteLine("Image selected");
					isImage = true;
					break;
				case "public.video":
					Console.WriteLine("Video selected");
					break;
			}

			// get common info (shared between images and video)
			NSUrl referenceURL = e.Info[new NSString("UIImagePickerControllerReferenceUrl")] as NSUrl;
			if (referenceURL != null)
				Console.WriteLine("Url:" + referenceURL.ToString());

			// if it was an image, get the other image info
			if (isImage)
			{
				// get the original image
				originalImage = e.Info[UIImagePickerController.OriginalImage] as UIImage;
				if (originalImage != null)
				{
					imageView.Image = this.originalImage;
					// do something with the image
					Console.WriteLine("got the original image");
					ViewModel.PerformUploadPhotoEvent(true);
					//TODO: uncomment this later
					//imageView.Image = originalImage; // display


					if (!LogPost.isEditing)
					{
						this.ViewModel.navigateOrganisationViewModel();
					}
					else
					{
						LogPost.photoChanged = true;
						this.ViewModel.navigateContinueEditing();
					}
				}
			}
			else
			{ // if it's a video
			  // get video url
				NSUrl mediaURL = e.Info[UIImagePickerController.MediaURL] as NSUrl;
				if (mediaURL != null)
				{
					Console.WriteLine(mediaURL.ToString());
				}
			}
			// dismiss the picker
			//TODO: May need to go back here
			//imagePicker.DismissModalViewControllerAnimated(true);
		}

		protected void Handle_FinishedPickingMediaCamera(object sender, UIImagePickerMediaPickedEventArgs e)
		{
			Debug.WriteLine("IMAGE TAKEN");
			//imagePicker.NavigationBar.Hidden = false;
			// determine what was selected, video or image
			bool isImage = false;
			switch (e.Info[UIImagePickerController.MediaType].ToString())
			{
				case "public.image":
					Console.WriteLine("Image selected");
					isImage = true;
					break;
				case "public.video":
					Console.WriteLine("Video selected");
					break;
			}

			// get common info (shared between images and video)
			NSUrl referenceURL = e.Info[new NSString("UIImagePickerControllerReferenceUrl")] as NSUrl;
			if (referenceURL != null)
				Console.WriteLine("Url:" + referenceURL.ToString());

			// if it was an image, get the other image info
			if (isImage)
			{
				// get the original image
				originalImage = e.Info[UIImagePickerController.OriginalImage] as UIImage;
				if (originalImage != null)
				{
					imageView.Image = this.originalImage;
					// do something with the image
					Console.WriteLine("got the original image");
					this.DismissViewController(true, null);
					ViewModel.PerformUploadPhotoEvent(true);
					if (!LogPost.isEditing)
					{
						this.ViewModel.navigateOrganisationViewModel();
					}
					else
					{
						LogPost.photoChanged = true;
						this.ViewModel.navigateContinueEditing();
					}
					//TODO: uncomment this later
					//imageView.Image = originalImage; // display
				}
			}
			else
			{ // if it's a video
			  // get video url
				NSUrl mediaURL = e.Info[UIImagePickerController.MediaURL] as NSUrl;
				if (mediaURL != null)
				{
					Console.WriteLine(mediaURL.ToString());
				}
			}
			// dismiss the picker
			//TODO: May need to go back here
			//imagePicker.DismissModalViewControllerAnimated(true);
		}

		void Handle_Canceled(object sender, EventArgs e)
		{
			//TODO: May need to go back here
			//imagePicker.DismissModalViewControllerAnimated(true);
			this.DismissViewController(true, null);
		}
		public override void ViewWillAppear(bool animated)
		{
			base.ViewWillAppear(animated);
			UIApplication.SharedApplication.StatusBarHidden = false;

			UIApplication.SharedApplication.StatusBarStyle = UIStatusBarStyle.Default;
			//this.TopView.changeBackgroundImage("LogPostPhotoHeaderBackground.png");
			//this.TopView.BackgroundColor = UIColor.FromPatternImage(new UIImage("LogPostPhotoHeaderBackground.png"));
			//this.TopView.BackgroundColor = UIColor.White;

			//ViewModel.ChoosePictureCommand.Execute(null);


			//imagePicker.NavigationControllerDelegate = (UIKit.UINavigationControllerDelegate)this.NavigationController.Delegate;
			ButtonStateSetUp();


			this.NavigationBarSetUp();

		}

		private void ButtonStateSetUp()
		{

			GalleryButton.TouchUpInside += delegate
			{
				this.DisplayChoosePicture();

				GalleryButton.BackgroundColor = UIColor.Black;

				CameraButton.BackgroundColor = UIColor.White;

				NoPhotoButton.BackgroundColor = UIColor.White;

				GalleryButton.SetTitleColor(UIColor.White, UIControlState.Normal);

				CameraButton.SetTitleColor(UIColor.Black, UIControlState.Normal);

				NoPhotoButton.SetTitleColor(UIColor.Black, UIControlState.Normal);

				GalleryButton.SetTitleColor(UIColor.White, forState: UIControlState.Normal);
			};

			CameraButton.TouchUpInside += delegate
			{
				//Open Camera

				this.DisplayCamera();

				GalleryButton.BackgroundColor = UIColor.White;

				CameraButton.BackgroundColor = UIColor.Black;

				NoPhotoButton.BackgroundColor = UIColor.White;

				GalleryButton.SetTitleColor(UIColor.Black, UIControlState.Normal);

				CameraButton.SetTitleColor(UIColor.White, UIControlState.Normal);

				NoPhotoButton.SetTitleColor(UIColor.Black, UIControlState.Normal);
			};

			NoPhotoButton.TouchUpInside += delegate
			{
				GalleryButton.BackgroundColor = UIColor.White;

				CameraButton.BackgroundColor = UIColor.White;

				NoPhotoButton.BackgroundColor = UIColor.Black;

				GalleryButton.SetTitleColor(UIColor.Black, UIControlState.Normal);

				CameraButton.SetTitleColor(UIColor.Black, UIControlState.Normal);

				NoPhotoButton.SetTitleColor(UIColor.White, UIControlState.Normal);
				LogPost.image = null;
				if (!LogPost.isEditing)
				{
					this.ViewModel.navigateOrganisationViewModel();
				}
				else
				{
					LogPost.photoChanged = true;

					this.ViewModel.navigateContinueEditing();
				}
			};



			GalleryButton.SendActionForControlEvents(UIControlEvent.TouchUpInside);

		}

		public void DisplayCamera()
		{

			imagePicker = new UIImagePickerController();
			//this.mainView.AddSubview(imagePicker.View);
			imagePicker.SourceType = UIImagePickerControllerSourceType.Camera;
			this.PresentViewController(imagePicker, true, null);
			imagePicker.FinishedPickingMedia += Handle_FinishedPickingMediaCamera;
			imagePicker.Canceled += Handle_Canceled;
		}

		private void DisplayChoosePicture()
		{

			imagePicker = new PorpoiseImagePicker();

			//this.NavigationController.PresentModalViewController(imagePicker, true);



			this.mainView.AddSubview(imagePicker.View);

			imagePicker.SourceType = UIImagePickerControllerSourceType.SavedPhotosAlbum;
			imagePicker.MediaTypes = UIImagePickerController.AvailableMediaTypes(UIImagePickerControllerSourceType.SavedPhotosAlbum);

			imagePicker.FinishedPickingMedia += Handle_FinishedPickingMedia;
			imagePicker.Canceled += Handle_Canceled;

			imagePicker.View.WillRemoveSubview(imagePicker.NavigationBar);

			imagePicker.NavigationBar.Hidden = true;

			imagePicker.NavigationBar.RemoveConstraints(imagePicker.NavigationBar.Constraints);

			//imagePicker.NavigationBar.Bounds = new CGRect(imagePicker.NavigationBar.Bounds.X, );

			imagePicker.View.Frame = new CGRect(this.mainView.Bounds.X, this.mainView.Bounds.Y, this.mainView.Bounds.Width, this.mainView.Bounds.Height);

			imagePicker.View.SizeToFit();

			imagePicker.ViewWillAppear(true);

			imagePicker.ViewDidAppear(true);

		}

		//button1.addTarget(self, action: "buttonClicked:", for: .touchUpInside);

		private void cleanLogHours()
		{

			LogPost.image = null;

		}


		void NavigationBarSetUp()
		{
			if (this.NavigationController != null)
			{
				//TODO: figure out how to make the status bar opaque.
				this.NavigationController.NavigationBar.BarStyle = UIBarStyle.Default;
				//this.NavigationController.NavigationBar.SetBackgroundImage(new UIImage(), UIBarMetrics.Default);
				this.NavigationController.NavigationBar.ShadowImage = new UIImage();
				this.NavigationController.NavigationBar.BackgroundColor = UIColor.White;
				//this.NavigationController.NavigationBar.BackgroundColor = UIColor.White;
				this.NavigationController.NavigationBar.BarTintColor = UIColor.White;
			}

			//this.NavigationController.NavigationBar.BackgroundColor = UIColor.Black;


			NavigationController.NavigationBar.Translucent = false;
			float imageSize = 20f;

			float gap = 5f;

			float borderSize = 0f;

			float textHeight = 1f;

			float buttonWidth = 60;

			float buttonHeight = borderSize * 2 + gap * 3 + imageSize + textHeight;

			float imageOrigin = borderSize + gap;

			float textTop = imageOrigin + imageSize + gap;

			float textBottom = borderSize + gap;

			float imageBottom = textBottom + textHeight + gap;

			UIBarButtonItem[] rightButtons = new UIBarButtonItem[2];

			UIButton rightButton1 = new UIButton();



			//rightButton1.SetTitle("Next", UIControlState.Normal);

			UIImage next = new UIImage("Next.png");

			UIButton button = UIButton.FromType(UIButtonType.Custom);

			button.Bounds = new CGRect(0, 0, next.Size.Width, next.Size.Height);

			button.SetBackgroundImage(next, UIControlState.Normal);

			UIBarButtonItem barButtonRightOne = new UIBarButtonItem(button);

			Bindings.Bind(button).To(vm => vm.NavigateNextView).Apply();

			/*rightButton1.Frame = new CGRect(0, 0, 30, 30);

			rightButton1.ContentMode = UIViewContentMode.Bottom;

			rightButton1.SetBackgroundImage(next, UIControlState.Normal);

			rightButton1.SetImage(next, UIControlState.Disabled);*/

			//rightButton1.SizeToFit();

			//rightButton1.TintColor = UIColor.Black;

			//rightButton1.SetTitleColor(UIColor.Black, UIControlState.Normal);

			//rightButton1.SetTitleShadowColor(UIColor.Blue, UIControlState.Normal);

			//rightButton1.ContentMode = UIViewContentMode.ScaleAspectFit;

			rightButtons[0] = barButtonRightOne;

			UIImage cancel;

			if(!LogPost.isEditing){

				cancel = new UIImage("Cancel.png");
			}
			else{
				cancel = new UIImage("Back.png");
			}

				UIButton cancelButton = UIButton.FromType(UIButtonType.Custom);

			cancelButton.Bounds = new CGRect(0, 0, cancel.Size.Width, cancel.Size.Height);

			cancelButton.SetBackgroundImage(cancel, UIControlState.Normal);

			UIBarButtonItem barButtonRightTwo = new UIBarButtonItem(cancelButton);

			if (!LogPost.isEditing)
			{

				Bindings.Bind(cancelButton).To(vm => vm.CancelCommand).Apply();

			}
			else
			{

				Bindings.Bind(cancelButton).To(vm => vm.NavigateContinueEditiongCommand).Apply();

			}
			/*UIButton rightButton2 = new UIButton();

			Bindings.Bind(rightButton2).To(vm => vm.CancelCommand).Apply();

			rightButton2.Frame = new CGRect(0, 0, 30, 30);

			rightButton2.SetTitle("Cancel",UIControlState.Normal);

			rightButton2.SizeToFit();

			rightButton2.TintColor = UIColor.Black;

			rightButton2.SetTitleColor(UIColor.Black, UIControlState.Normal);

			rightButton2.SetTitleShadowColor(UIColor.Blue, UIControlState.Normal);

			rightButton2.ContentMode = UIViewContentMode.ScaleAspectFit;*/


			rightButtons[1] = barButtonRightTwo;

			//Add Constraints
			NSLayoutConstraint[] constraints = new NSLayoutConstraint[1];
			//NSLayoutConstraint alingY = NSLayoutConstraint.Create(rightButton2, NSLayoutAttribute.CenterY, NSLayoutRelation.Equal, this.NavigationController.NavigationBar, NSLayoutAttribute.CenterY, 1,1);
			//constraints[0] = alingY;
			//NSLayoutConstraint.ActivateConstraints(constraints);
			//rightButton2.AddConstraint(alingY);


			/*UIButton rigthButton = new UIButton();

			rigthButton.Frame = new CGRect(0, 0, buttonWidth, buttonHeight);

			rigthButton.Center = this.View.Center;

			//Image

			UIImage logout = new UIImage("logout.png");

			rigthButton.SetImage(logout, UIControlState.Normal);

			rigthButton.ImageEdgeInsets = new UIEdgeInsets(0, 15, 0, 0);

			rigthButton.SetTitle(Resource.Logout, UIControlState.Normal);

			rigthButton.TitleEdgeInsets = new UIEdgeInsets(textTop, -logout.Size.Width, textBottom, 0.0f);

			rigthButton.TitleLabel.Font = UIFont.FromName("Ubuntu-Light", 15f);

			rigthButton.TintColor = UIColor.Black;

			rigthButton.SetTitleColor(UIColor.Black, UIControlState.Normal);

			rigthButton.SetTitleShadowColor(UIColor.Blue, UIControlState.Normal);

			rigthButton.TouchUpInside += delegate
			{
				var user = NSUserDefaults.StandardUserDefaults;

				user.SetBool(true, "logged");

				//ViewModel.Logout();

			};*/

			NavigationItem.RightBarButtonItem = barButtonRightTwo;

			UIImage leftImage = new UIImage("PorpoiseLeftBar.png");

			UIButton leftButton = UIButton.FromType(UIButtonType.Custom);

			leftButton.UserInteractionEnabled = false;

			leftButton.Bounds = new CGRect(0, 0, leftImage.Size.Width, leftImage.Size.Height);

			leftButton.SetBackgroundImage(leftImage, UIControlState.Normal);

			UIBarButtonItem leftButtonBar = new UIBarButtonItem(leftButton);

			//NavigationItem.RightBarButtonItem.Title = Resource.Logout;

			//NavigationItem.RightBarButtonItem.Image = new UIImage("logout.png");

			//UIButton leftButton = new UIButton();

			/*leftButton.UserInteractionEnabled = false;

			leftButton.Frame = new CGRect(0, 0, 30, 30);

			leftButton.SetImage(new UIImage("PORPOISEALONE.png"), UIControlState.Normal);

			leftButton.SetImage(new UIImage("PORPOISEALONE.png"), UIControlState.Disabled);
			leftButton.SizeToFit();
			UIButton leftButton1 = new UIButton();

			leftButton1.UserInteractionEnabled = false;

			leftButton1.Frame = new CGRect(0, 0, 30, 30);

			//leftButton1.SetImage(new UIImage("PorpoiseText.png"), UIControlState.Normal);

			//leftButton1.SetImage(new UIImage("PorpoiseText.png"), UIControlState.Disabled);

			leftButton1.SetTitle("Porpoise", UIControlState.Normal);

			leftButton1.SetTitle("Porpoise", UIControlState.Disabled);

			leftButton1.TintColor = UIColor.Black;

			leftButton1.SetTitleColor(UIColor.Black, UIControlState.Normal);

			leftButton1.SetTitleShadowColor(UIColor.Blue, UIControlState.Normal);

			leftButton1.ContentMode = UIViewContentMode.ScaleAspectFit;

			leftButton1.SizeToFit();

			UIBarButtonItem[] leftButtons = new UIBarButtonItem[2];

			leftButtons[0] = new UIBarButtonItem(leftButton);

			leftButtons[1] = new UIBarButtonItem(leftButton1);
			//leftButton.TintColor = UIColor.Black;
			*/
			NavigationItem.SetLeftBarButtonItem(leftButtonBar, true);

			UILabel label = new UILabel();

			label.TextColor = UIColor.Black;

			label.TintColor = UIColor.Black;

		}
		public override void ViewDidLoad()
		{
			base.ViewDidLoad();

			this.cleanLogHours();

			this._settings = Mvx.Resolve<ISettings>();

			this.styleElements();

			ViewModel.UploadAssetEvent += (sender, e) =>
			{
				//if successull, make the image view visible again
				if (e.Successful)
				{

					Debug.WriteLine("Creating Binding");


					using (NSData imageData = originalImage.AsJPEG())
					{
						Byte[] myByteArray = new Byte[imageData.Length];

						System.Runtime.InteropServices.Marshal.Copy(imageData.Bytes, myByteArray, 0, Convert.ToInt32(imageData.Length));

						Debug.WriteLine("MY BYTES ARRAY SIZE " + myByteArray.Length);
						//Bindings.Bind(myByteArray).To(vm => vm.Bytes).Apply();
						LogPost.image = myByteArray;
						//this.ViewModel.navigateOrganisationViewModel();

						//this.TopView.AddSubview(imageView);

					}

				}
			};


			//this.PresentViewController(dialog, true, () => { });
			//this.ShowEncourageCameraPermissionAlert(Resource.AllowPhotoAccess, Resource.PhotosAccessRequiredMessage);
		}
		void ShowEncourageCameraPermissionAlert(string permission, string message)
		{
			var alert = UIAlertController.Create(Resource.AccessRequiredTitle, message, UIAlertControllerStyle.Alert);
			var dismiss = UIAlertAction.Create(Resource.Dismiss, UIAlertActionStyle.Cancel, null);
			var goToSettings = UIAlertAction.Create(permission, UIAlertActionStyle.Default, (obj) =>
			{
				UIApplication.SharedApplication.OpenUrl(new NSUrl(UIApplication.OpenSettingsUrlString));
			});
			alert.AddAction(goToSettings);
			alert.AddAction(dismiss);
			this.PresentViewController(alert, true, null);
		}
		UIAlertController BuildUploadImageDialog()
		{
			var dialog = UIAlertController.Create("", Resource.UploadAnImage, UIAlertControllerStyle.ActionSheet);
			if (dialog.PopoverPresentationController != null)
			{
				//dialog.PopoverPresentationController.SourceView = AddImage;
				//dialog.PopoverPresentationController.SourceRect = AddImage.Bounds;
			}


			var library = UIAlertAction.Create(Resource.ChooseFromLibrary, UIAlertActionStyle.Default, x =>
			{


				ViewModel.ChoosePictureCommand.Execute(null);

				switch (PHPhotoLibrary.AuthorizationStatus)
				{
					case PHAuthorizationStatus.Denied:
						ShowEncourageCameraPermissionAlert(Resource.AllowPhotoAccess, Resource.PhotosAccessRequiredMessage);
						break;
					case PHAuthorizationStatus.Authorized:
						break;
					default:
						break;
				}
			});

			var cancel = UIAlertAction.Create(Resource.Cancel, UIAlertActionStyle.Cancel, null);


			dialog.AddAction(library);

			return dialog;
		}

		private void styleElements(){
			this.HeaderView.BackgroundColor = PorpoiseColors.FromHex(0xF09494);
			//this.HeaderView.changeBackgroundImage("LogPostPhotoHeaderBackground.png");
			//Header section
			foreach(NSLayoutConstraint constraint in HeaderView.Constraints){
				
				if(constraint.Description.Contains("width")){
					constraint.Constant = this.View.Bounds.Width;

				}

			}

			//Header buttons
			foreach(NSLayoutConstraint constraint in buttons.Constraints){

				if (constraint.Description.Contains("width"))
				{
					constraint.Constant = this.View.Bounds.Width;

				}
			}

			//Header buttons camera
			foreach(NSLayoutConstraint constraint in CameraButton.Constraints){

				if (constraint.Description.Contains("width"))
				{
					constraint.Constant = this.View.Bounds.Width/3;

				}

			}


			//NoPhoto button NoPhoto
			foreach (NSLayoutConstraint constraint in NoPhotoButton.Constraints)
			{

				if (constraint.Description.Contains("width"))
				{
					constraint.Constant = this.View.Bounds.Width / 3;

				}

			}

			//mainview
			foreach (NSLayoutConstraint constraint in mainView.Constraints)
			{

				if (constraint.Description.Contains("width"))
				{
					constraint.Constant = this.View.Bounds.Width;

				}
				if(constraint.Description.Contains("height")){

					constraint.Constant = this.View.Bounds.Height - this.HeaderView.Bounds.Height - this.buttons.Bounds.Height;
				}

			}
		}

	}
}
